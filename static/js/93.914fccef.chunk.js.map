{"version":3,"file":"static/js/93.914fccef.chunk.js","mappings":"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","sources":["api/api.js","components/Cast/Cast.styled.jsx","components/Cast/Cast.jsx","constants/statuses.js"],"sourcesContent":["import axios from \"axios\";\r\n\r\nconst API_KEY = '59a503cfafa46b9718571bf9985df846';\r\n\r\naxios.defaults.baseURL = \"https://api.themoviedb.org/3\";\r\n\r\n\r\nexport const getTrending = async () => { \r\n    const response = await axios.get(`/trending/movie/week?api_key=${API_KEY}`);\r\n    return response.data?.results;\r\n};\r\n\r\n\r\nexport const searchMovies = async (query, page, adult = false, year) => {\r\n    const getYearStr = year ? `&year=${year}` : '';\r\n    const response = await axios.get(`/search/movie?api_key=${API_KEY}&query=${query}&page=${page}&include_adult=${adult}${getYearStr}`);\r\n    return response.data.results;\r\n};\r\n\r\nexport const getMovieById = async (id) => {\r\n    const response = await axios.get(`/movie/${id}?api_key=${API_KEY}&language=uk-UA`);\r\n    return response.data;\r\n};\r\n\r\nexport const getMovieCast = async (id) => {\r\n    const response = await axios.get(`/movie/${id}/credits?api_key=${API_KEY}`);\r\n    return response.data;\r\n};\r\n\r\nexport const getMovieReviews = async (id, page = 1) => {\r\n    const response = await axios.get(`/movie/${id}/reviews?api_key=${API_KEY}&page=${page}`);\r\n    return response.data?.results;\r\n};","import styled from '@emotion/styled';\r\n\r\n\r\nexport const CastSection = styled.section`\r\n    padding: 20px;\r\n    border: 2px solid ${props => props.theme.colors.whiteText};\r\n    border-radius: ${props => props.theme.radii.cardBorderRadius}px;\r\n`;\r\n\r\nexport const CastList = styled.ul`\r\n    display: grid;\r\n    grid-template-columns: repeat(auto-fit, 200px);\r\n    justify-content: center;\r\n    gap: 15px;\r\n    margin: 0;\r\n    padding: 0;\r\n    &>li{\r\n        width: 100%;\r\n        background: ${props => props.theme.colors.cardBg};\r\n        box-shadow: ${props => props.theme.colors.boxShadow};\r\n        border-radius: ${props => props.theme.radii.cardBorderRadius}px;\r\n        border: ${props => props.theme.colors.border};\r\n        overflow: hidden;\r\n        cursor: pointer;\r\n        text-align: center;\r\n        transition: ${props => props.theme.transitions.trAllDefLin};\r\n        & img{\r\n            width: 100%;\r\n            min-width: 198px;\r\n            min-height: 297px;\r\n        }\r\n        & .actor-name{\r\n            font-size: 18px;\r\n            padding: 0 15px;\r\n        }\r\n        & .actor-character{\r\n            padding: 0 15px;\r\n        }\r\n    }\r\n`;\r\n","import { useParams } from \"react-router-dom\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { getMovieCast } from \"api/api\";\r\nimport { STATUSES } from 'constants/statuses';\r\nimport { ErrorMessage } from 'components/App/App.syled';\r\nimport { CastSection, CastList } from './Cast.styled';\r\nimport Loader from \"components/Loader\";\r\nimport placeholder from 'img/404.jpg';\r\n\r\nconst Cast = () => {\r\n    const { movieId } = useParams();\r\n    const [cast, setCast] = useState([]);\r\n    const [error, setError] = useState('');\r\n    const [appStatus, setAppStatus] = useState(STATUSES.IDLE);\r\n\r\n    useEffect(()=>{\r\n        const fetchCast = async () =>{\r\n            setAppStatus(STATUSES.PENDING);\r\n            try {\r\n                const response = await getMovieCast(movieId);\r\n                if(!response.cast){\r\n                    setError('‚ùå Sorry, something went wrong! Cast information not found :(');\r\n                    setAppStatus(STATUSES.REJECTED);\r\n                }\r\n                else{\r\n                    const newCast = response.cast.slice(0, 10);\r\n                    setCast(newCast);\r\n                    setAppStatus(STATUSES.RESOLVED);\r\n                }\r\n            } catch (error) {\r\n                setError(error?.response.data?.status_message);\r\n                setAppStatus(STATUSES.REJECTED);\r\n            }\r\n        } \r\n        if(!movieId) return;\r\n        fetchCast();\r\n    }, [movieId]);\r\n\r\n    if(appStatus === STATUSES.IDLE){\r\n        return(<></>);\r\n    }\r\n    if(appStatus === STATUSES.PENDING){\r\n        return(\r\n            <CastSection>\r\n                <Loader/>\r\n            </CastSection>\r\n        )\r\n    }\r\n    if(appStatus === STATUSES.RESOLVED){\r\n        return(\r\n            <CastSection>\r\n                <CastList>\r\n                    {\r\n                        cast.map(({profile_path, original_name, character, cast_id}) => {\r\n                            const imgPath = profile_path ? `https://image.tmdb.org/t/p/w500/${profile_path}` : placeholder;\r\n                            return (\r\n                                <li key={cast_id}>\r\n                                    <img src={imgPath} alt={original_name} />\r\n                                    <p className=\"actor-name\"><span>{original_name}</span></p>\r\n                                    <p className=\"actor-character\">Character: <span>{character}</span></p>\r\n                                </li>\r\n                            );\r\n                        })\r\n                    }\r\n                </CastList>\r\n            </CastSection>\r\n        )\r\n    }\r\n    if(appStatus === STATUSES.REJECTED){\r\n        return(\r\n            <CastSection>\r\n                <ErrorMessage>{error}</ErrorMessage>\r\n            </CastSection>\r\n        );\r\n    };\r\n};\r\n\r\nexport default Cast;","export const STATUSES = {\r\n  IDLE: 'idle',\r\n  PENDING: 'pending',\r\n  REJECTED: 'rejected',\r\n  RESOLVED: 'resolved'\r\n};"],"names":["API_KEY","axios","getTrending","response","data","results","searchMovies","query","page","adult","getYearStr","year","getMovieById","id","getMovieCast","getMovieReviews","CastSection","styled","props","theme","colors","whiteText","radii","cardBorderRadius","CastList","cardBg","boxShadow","border","transitions","trAllDefLin","movieId","useParams","useState","cast","setCast","error","setError","STATUSES","appStatus","setAppStatus","useEffect","fetchCast","newCast","slice","status_message","Loader","map","profile_path","original_name","character","cast_id","imgPath","placeholder","src","alt","className","IDLE","PENDING","REJECTED","RESOLVED"],"sourceRoot":""}