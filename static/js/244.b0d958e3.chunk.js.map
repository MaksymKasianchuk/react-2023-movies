{"version":3,"file":"static/js/244.b0d958e3.chunk.js","mappings":"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","sources":["api/api.js","components/Reviews/Reviews.styled.jsx","components/Reviews/Reviews.jsx","constants/statuses.js"],"sourcesContent":["import axios from \"axios\";\r\n\r\nconst API_KEY = '59a503cfafa46b9718571bf9985df846';\r\n\r\naxios.defaults.baseURL = \"https://api.themoviedb.org/3\";\r\n\r\n\r\nexport const getTrending = async () => { \r\n    const response = await axios.get(`/trending/movie/week?api_key=${API_KEY}`);\r\n    return response.data?.results;\r\n};\r\n\r\n\r\nexport const searchMovies = async (query, page, adult = false, year) => {\r\n    const getYearStr = year ? `&year=${year}` : '';\r\n    const response = await axios.get(`/search/movie?api_key=${API_KEY}&query=${query}&page=${page}&include_adult=${adult}${getYearStr}`);\r\n    return response.data.results;\r\n};\r\n\r\nexport const getMovieById = async (id) => {\r\n    const response = await axios.get(`/movie/${id}?api_key=${API_KEY}&language=uk-UA`);\r\n    return response.data;\r\n};\r\n\r\nexport const getMovieCast = async (id) => {\r\n    const response = await axios.get(`/movie/${id}/credits?api_key=${API_KEY}`);\r\n    return response.data;\r\n};\r\n\r\nexport const getMovieReviews = async (id, page = 1) => {\r\n    const response = await axios.get(`/movie/${id}/reviews?api_key=${API_KEY}&page=${page}`);\r\n    return response.data?.results;\r\n};","import styled from '@emotion/styled';\r\n\r\nexport const ReviewsSection = styled.section`\r\n    padding: 20px;\r\n    border: 2px solid ${props => props.theme.colors.whiteText};\r\n    border-radius: ${props => props.theme.radii.cardBorderRadius}px;\r\n`;\r\n\r\nexport const ReviewsList = styled.ul`\r\n    padding: 0;\r\n    margin: 0;\r\n    list-style: none;\r\n    &>li{\r\n        background: ${props => props.theme.colors.cardBg};\r\n        padding: 20px;\r\n        box-shadow: ${props => props.theme.colors.boxShadow};\r\n        border-radius: ${props => props.theme.radii.cardBorderRadius}px;\r\n        &:not(:last-child){\r\n            margin: 0 0 30px 0;\r\n        }\r\n        &>p{\r\n            margin: 0;\r\n        }\r\n        & .author{\r\n            font-size: 18px;\r\n            margin-bottom: 20px;\r\n            &>span{\r\n                font-weight: 700;\r\n            }\r\n        }\r\n        & .date{\r\n            margin-bottom: 10px;\r\n            font-size: 18px;\r\n        }\r\n    }\r\n`;","import { useParams } from \"react-router-dom\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { getMovieReviews } from \"api/api\";\r\nimport { STATUSES } from 'constants/statuses';\r\nimport { ReviewsSection, ReviewsList } from './Reviews.styled';\r\nimport Loader from \"components/Loader\";\r\nimport { ErrorMessage } from \"components/App/App.syled\";\r\n\r\nconst Reviews = () => {\r\n    const { movieId } = useParams();\r\n    const [reviews, setReviews] = useState([]);\r\n    const [error, setError] = useState('');\r\n    const [appStatus, setAppStatus] = useState(STATUSES.IDLE);\r\n\r\n    useEffect(()=>{\r\n        const fetchReviews = async () =>{\r\n            setAppStatus(STATUSES.PENDING);\r\n            try {\r\n                const response = await getMovieReviews(movieId);\r\n                if(!response || response.length === 0){\r\n                    setError('‚ùå Sorry, something went wrong! Reviews not found :(');\r\n                    setAppStatus(STATUSES.REJECTED);\r\n                }\r\n                else{\r\n                    setReviews(response);\r\n                    setAppStatus(STATUSES.RESOLVED);\r\n                }\r\n            } catch (error) {\r\n                setError(error?.response.data?.status_message);\r\n                setAppStatus(STATUSES.REJECTED);\r\n            }\r\n        } \r\n        if(!movieId) return;\r\n        fetchReviews();\r\n    }, [movieId]);\r\n\r\n    if(appStatus === STATUSES.IDLE){\r\n        return(<></>);\r\n    }\r\n    if(appStatus === STATUSES.PENDING){\r\n        return(\r\n            <ReviewsSection>\r\n                <Loader/>\r\n            </ReviewsSection>\r\n        )\r\n    }\r\n    if(appStatus === STATUSES.RESOLVED){\r\n        return(\r\n            <ReviewsSection>\r\n                <ReviewsList>\r\n                    {\r\n                        reviews.map(({author, content, created_at, id}) => {\r\n                            const postDate = new Date(created_at);\r\n                            const postDateDay = (\"0\" + postDate.getDate()).slice(-2);\r\n                            const postDateMonth = (\"0\" + (postDate.getMonth() + 1)).slice(-2);\r\n                            const postDateStr = `${postDateDay}.${postDateMonth}.${postDate.getFullYear()}`;\r\n                            return (\r\n                                <li key={id}>\r\n                                    <p className=\"author\">Author name: <span>{author}</span></p>\r\n                                    <p className=\"date\">Posted at: <span>{postDateStr}</span></p>\r\n                                    <p className=\"content\">{content}</p>\r\n                                </li>\r\n                            );\r\n                        })\r\n                    }\r\n                </ReviewsList>\r\n            </ReviewsSection>\r\n        )\r\n    }\r\n    if(appStatus === STATUSES.REJECTED){\r\n        return(\r\n            <ReviewsSection>\r\n                <ErrorMessage>{error}</ErrorMessage>\r\n            </ReviewsSection>\r\n        );\r\n    };\r\n};\r\n\r\nexport default Reviews;","export const STATUSES = {\r\n  IDLE: 'idle',\r\n  PENDING: 'pending',\r\n  REJECTED: 'rejected',\r\n  RESOLVED: 'resolved'\r\n};"],"names":["API_KEY","axios","getTrending","response","data","results","searchMovies","query","page","adult","getYearStr","year","getMovieById","id","getMovieCast","getMovieReviews","ReviewsSection","styled","props","theme","colors","whiteText","radii","cardBorderRadius","ReviewsList","cardBg","boxShadow","movieId","useParams","useState","reviews","setReviews","error","setError","STATUSES","appStatus","setAppStatus","useEffect","fetchReviews","length","status_message","Loader","map","author","content","created_at","postDate","Date","postDateDay","getDate","slice","postDateMonth","getMonth","postDateStr","getFullYear","className","IDLE","PENDING","REJECTED","RESOLVED"],"sourceRoot":""}